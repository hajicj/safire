[_info]
name='test_retrieval_config'

[_loader]
_class=safire.data.loaders.MultimodalShardedDatasetLoader
root='test-data/'
name='test-data'

[_builder]
_import=safire.datasets.dataset.Dataset,safire.utils.transcorp
save=True
save_every=False
savename=_loader.pipeline_name(_info.name)
log_blocks=False
log_saving=False

[_assembly]
_icorp_source_=icorp_source
_tanh_source_=tanh[_icorp_source_]
_tss_=source_serializer[_tanh_source_]
_source_transformed_=sftrans[_tss_]
_icorp_queries_=icorp_queries
_tanh_queries_=tanh[_icorp_queries_]
_queries_transformed_=sftrans[_tanh_queries_]
_retrieved_=similarity[_queries_transformed_]

[_persistence]
loader=_loader
_icorp_queries_=similarity_results

[sftrans]
_class=safire.learning.interfaces.safire_transformer.SafireTransformer
_dependencies=run_handle,model_handles,learner
_access_deps=run_handle:sftrans.run_handle
_import=safire.datasets.dataset.Dataset
run_handle=run_handle
setup_handles=model_handles
dataset=Dataset(_tss_)
learner=learner
dense_throughput=False

[run_handle]
_dependencies=model_handles
_exec=model_handles['run']

[model_handles]
_import=safire.learning.models.denoising_autoencoder.DenoisingAutoencoder,theano
_init=DenoisingAutoencoder.setup
data=Dataset(_tss_)
n_out=200
activation=theano.tensor.nnet.sigmoid
backward_activation=theano.tensor.tanh
reconstruction='mse'
heavy_debug=False

[learner]
_class=safire.learning.learners.base_sgd_learner.BaseSGDLearner
n_epochs=5
b_size=1
learning_rate=0.13
validation_frequency=4
plot_transformation=False

[similarity]
_class=safire.utils.transformers.SimilarityTransformer
_dependencies=index
_access_deps=index:similarity.index
index=index

[index]
_class=gensim.similarities.Similarity
_dependencies=iloader
output_prefix=iloader.output_prefix('.img')
corpus=_source_transformed_
num_features=safire.utils.transcorp.dimension(_icorp_source_)
num_best=10

[tanh]
_import=numpy
_class=safire.utils.transformers.GeneralFunctionTransform
fn=numpy.tanh
multiplicative_coef=0.4

[iloader]
_class=safire.data.loaders.IndexLoader
root=_loader.root
name=_loader.layout.name

[icorp_queries]
_class=safire.data.imagenetcorpus.ImagenetCorpus
input=os.path.join(_loader.root, _loader.layout.image_vectors)
delimiter=';'
dim=4096

[icorp_source]
_class=safire.data.imagenetcorpus.ImagenetCorpus
input=os.path.join(_loader.root, _loader.layout.image_vectors)
delimiter=';'
dim=4096

[source_serializer]
_import=safire.data.sharded_corpus.ShardedCorpus
_class=safire.data.serializer.Serializer
corpus=_tanh_source_
serializer_class=ShardedCorpus
fname=_loader.pipeline_serialization_target('.image_data')
overwrite=True
